Drawer
A container which slides in from the edge of the screen.

Drawers are containers which can either be completely hidden from view, or be made visible by sliding in from the edge of the screen. They are commonly used for navigation on smaller displays.

Drawers take two children: The anchor is always visible and positions the drawer. The content is located inside the drawer and is only visible when the drawer is open.

Drawers have the ability to be modal. Modal drawers draw attention to themselves and prevent interaction with the anchor while open.

Constructor
Drawer(
    anchor: rio.Component, 
    content: rio.Component, 
    *, 
    on_open_or_close: rio.EventHandler[rio.DrawerOpenOrCloseEvent] = None, 
    side: Literal['left', 'right', 'top', 'bottom'] = 'left', 
    is_modal: bool = True, 
    is_open: bool = False, 
    is_user_openable: bool = True, 
    color: rio.ColorSet = 'neutral', 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin: float | None = None, 
)
anchor
rio.Component
A component which is always visible and positions the drawer.

content
rio.Component
A component which is only visible when the drawer is open.

on_open_or_close
rio.EventHandler[rio.DrawerOpenOrCloseEvent]
Triggered whenever the user opens or closes the drawer.

side
Literal['left', 'right', 'top', 'bottom']
The side of the screen from which the drawer slides in.

is_modal
bool
Whether the drawer should prevent interaction with the anchor while open.

is_open
bool
Whether the drawer is currently open.

is_user_openable
bool
Whether the user can open or close the drawer. If this is False, the drawer can only be opened or closed programmatically.

color
rio.ColorSet
The color scheme to use for the drawer content. The drawer itself will use the specified color, while content will automatically use one that is legible on top of it. This has no effect on the anchor.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

Examples
A simple drawer with a button as the anchor and some text as content:

Python

rio.Drawer(
    anchor=rio.Button("Click Me!"),
    content=rio.Text("It was clickbait!"),
)
Same as above, but wired so the drawer opens when the button is clicked:

Python

class MyComponent(rio.Component):
    is_open: bool = False

    def on_press_button(self) -> None:
        self.is_open = True

    def build(self) -> rio.Component:
        return rio.Drawer(
            anchor=rio.Button(
                "Click Me!",
                on_press=self.on_press_button,
            ),
            content=rio.Text(
                "It was clickbait!",
            ),
            is_open=self.is_open,
        )