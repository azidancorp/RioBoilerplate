Icon
Displays one of many pre-bundled icons.

Icons are a great way to add polish to your app. A good icon can help your users understand your app and immediately recognize what a component does.

Rio includes hundreds of free icons, allowing you to easily add them to your app without having to find or create your own. The Icon component displays one of these icons.

Note that unlike most components in Rio, the Icon component does not have a natural size, since icons can be easily be scaled to fit any space. Because of this, Icon defaults to a width and height of 1.3, which is a great size when mixing icons with text.

Icon names are in the format icon_set/icon_name:variant. Rio already ships with the material icon set, which contains icons in the style of Google's Material Design. You can browse all available icons in Rio's dev tools. (The dev tools sidebar is visible on the right-hand-side when running your project using rio run.)

The set name and variant can be omitted. If no set name is specified, it defaults to material. If no variant is specified, the default version of the icon, i.e. no variant, is used.

Constructor
Icon(
    icon: str, 
    *, 
    fill: rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.Color | Literal['background', 'neutral', 'hud', 'primary', 'secondary', 'success', 'warning', 'danger', 'keep'] | Literal['dim'] = 'keep', 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 1.3, 
    min_height: float = 1.3, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)

icon
str
The name of the icon to display, in the format icon_set/icon_name:variant. You can browse all available icons in Rio's dev tools sidebar.

fill
rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.Color | Literal['background', 'neutral', 'hud', 'primary', 'secondary', 'success', 'warning', 'danger', 'keep'] | Literal['dim']
The color scheme of the icon. The text color is used if no fill is specified.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

Functions
Icon.register_icon_set
staticmethod
Adds an icon set to the global registry. This allows the icons to be accessed as "icon_set/icon_name" or "icon_set/icon_name:variant".

There must not already be a set with the given name.

The icon set is a .tar.xz compressed archive and must contain exactly one directory, which must be named identically to the icon set. Files located in the root of that directory can be accessed as "icon_set/icon_name". Files located in a subdirectory can be accessed as "icon_set/icon_name:variant".

For SVG files to work as icons...

They must have a viewBox attribute, but no height or width
They must contain exactly one XML root node: <svg>...</svg>. Comments also count!
Rio colors paths by assigning a fill to the SVG root. This only works as long as the SVG paths don't have a <style> assigned already.

Signature
@staticmethod
def register_icon_set(
    set_name: str, 
    set_archive_path: pathlib.Path, 
) -> None

set_name
str
The name of the new icon set. This will be used to access the icons.

set_archive_path
pathlib.Path
The path to the .tar.xz archive containing the icon set.

Icon.register_single_icon
staticmethod
Adds a single icon to the global registry. This allows the icon to be accessed as "icon_set/icon_name" or "icon_set/icon_name:variant".

icon_source needs to be the path to a single SVG file. For SVG files to work as icons, they need to meet some conventions:

They must have a viewBox attribute, but no height or width
They must contain exactly one XML root node: <svg>...</svg>. Comments also count!
Rio colors paths by assigning a fill to the SVG root. This only works as long as the SVG paths don't have a <style> assigned already.

Signature
@staticmethod
def register_single_icon(
    icon_source: pathlib.Path, 
    set_name: str, 
    icon_name: str, 
    variant_name: str | None = None, 
) -> None

icon_source
pathlib.Path
The path to the SVG file containing the icon.

set_name
str
The name of the new icon set. This will be used to access the icons.

icon_name
str
The name of the icon. This will be used to access the icon.

variant_name
str | None
The name of the variant. This will be used to access the icon. If not specified, the default variant will be used.

Examples
This minimal example will display the icon named "castle" from the "material" icon set:

Python
rio.Icon("material/castle")

You can also specify the color, width and height of the icon:

Python
rio.Icon(
    "material/castle",
    fill=rio.Color.from_hex("ff0000"),
    min_height=2.5,
    min_width=2.5,
)