CustomListItem
A list item with custom content.

Most of the time the SimpleListItem will do the job. With CustomListItems you can build more complex list items. You can add any component to the list item. This can be e.g. a Row, Column, Text, Icon, Image or any other component.

Constructor
CustomListItem(
    content: rio.Component, 
    *, 
    on_press: rio.EventHandler[[]] = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
)

content
rio.Component
The content to display.

on_press
rio.EventHandler[[]]
Triggered when the list item is pressed.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

Examples
Instead of using the SimpleListItem you can use the CustomListItem to create a custom list item. This can be useful if you want to add more complex content to the list item. You can add any component to the list item.

Python

import functools


class MyCustomListItemComponent(rio.Component):
    # Create a custom list item
    product: str
    button_text: str

    def build(self) -> rio.Component:
        return rio.Row(
            rio.Text(self.product),
            rio.Spacer(),
            rio.Button(
                self.button_text,
                on_press=lambda: print("Hello, world!"),
            ),
        )


class MyComponent(rio.Component):
    products: list[str] = ["Product 1", "Product 2", "Product 3"]

    def on_press_heading_list_item(self, product: str) -> None:
        print(f"Selected {product}")

    def build(self) -> rio.Component:
        # Start off empty
        result = rio.ListView()

        # Add all items
        for product in self.products:
            result.add(
                rio.CustomListItem(
                    # Use the `MyCustomListItem` component to create a
                    # custom list item
                    content=MyCustomListItemComponent(
                        product=product, button_text="Click Me!"
                    ),
                    key=product,
                    # Note the use of `functools.partial` to pass the
                    # product to the event handler.
                    on_press=functools.partial(
                        self.on_press_heading_list_item,
                        product=product,
                    ),
                )
            )

        # Done!
        return result