Popup
A container which floats above other components.

Popups are containers which float above the page when open. This allows you to keep your app clean by default, but present additional information or controls when needed.

They take two children: The anchor is always visible and positions the popup. The content is located inside the popup and is only visible when the popup is open.

The location popups appear at can be customized using the direction, alignment and gap attributes. Popups will do their best to honor those settings, but deviate if necessary to ensure they don't go off-screen.

Example
Constructor
Popup(
    anchor: rio.Component, 
    content: rio.Component, 
    *, 
    color: rio.Color | Literal['background', 'neutral', 'hud', 'primary', 'secondary', 'success', 'warning', 'danger', 'keep'] | Literal['none'] = 'hud', 
    corner_radius: float | tuple[float, float, float, float] | None = None, 
    position: Literal['auto', 'left', 'top', 'right', 'bottom', 'center', 'fullscreen'] = 'center', 
    alignment: float = 0.5, 
    gap: float = 0.8, 
    is_open: bool = False, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin: float | None = None, 
)
anchor
rio.Component
A component which is always visible and positions the popup.
content
rio.Component
A component which is only visible when the popup is open.
color
rio.Color | Literal['background', 'neutral', 'hud', 'primary', 'secondary', 'success', 'warning', 'danger', 'keep'] | Literal['none']
The color scheme to use for the popup's content. The popup will use the specified color as background, while content will automatically use one that is legible on top of it.
corner_radius
float | tuple[float, float, float, float] | None
The radius of the card's corners. If set to None, it is picked from the active theme.
position
Literal['auto', 'left', 'top', 'right', 'bottom', 'center', 'fullscreen']
The location at which the popup opens, relative to the anchor.
alignment
float
The alignment of the popup within the anchor. If the popup opens to the left or right, this is the vertical alignment, with 0 being the top and 1 being the bottom. If the popup opens to the top or bottom, this is the horizontal alignment, with 0 being the left and 1 being the right. Has no effect if the popup opens centered.
gap
float
How much space to leave between the popup and the anchor. Has no effect popup opens centered. As all units in Rio, this is measured in font-heights.
is_open
bool
Whether the popup is currently open.
key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.
min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.
Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.
Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.
min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.
Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.
Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.
grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.
grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.
align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.
align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.
margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

Examples
Most popups are opened by clicking a button. Here's an example that opens and closes a popup when a button is pressed:

Python

class MyComponent(rio.Component):
    is_open: bool = False

    def on_button_press(self):
        self.is_open = not self.is_open

    def build(self) -> rio.Component:
        return rio.Popup(
            anchor=rio.Button(
                "Open Popup",
                on_press=self.on_button_press,
            ),
            content=rio.Card(
                content=rio.Text(
                    "Hello World!",
                    justify="center",
                ),
                min_width=30,
                min_height=10,
            ),
            # The popup will open above the anchor
            is_open=self.is_open,
            position="top",
        )