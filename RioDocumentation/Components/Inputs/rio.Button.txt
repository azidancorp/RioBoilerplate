Button
A clickable button.

The Button component allows the user to trigger an action by clicking on it. You can use it to trigger a function call, navigate to a different page, or perform any other action you'd like.

Constructor
Button(
    content: str | rio.Component = '', 
    *, 
    icon: str | None = None, 
    shape: Literal['pill', 'rounded', 'rectangle'] = 'pill', 
    style: Literal['major', 'minor', 'colored-text', 'plain-text', 'plain'] = 'major', 
    color: rio.ColorSet = 'keep', 
    is_sensitive: bool = True, 
    is_loading: bool = False, 
    on_press: rio.EventHandler[[]] = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin: float | None = None, 
)

content
str | rio.Component
The text or child component to display inside of the button.

icon
str | None
The name of an icon to display on the button, in the form "set/name:variant". See the Icon component for details of how icons work in Rio.

shape
Literal['pill', 'rounded', 'rectangle']
The shape of the button. This can be one of:
- "pill": A rectangle where the left and right sides are completely round.
- "rounded": A rectangle with rounded corners.
- "rectangle": A rectangle with sharp corners.

style
Literal['major', 'minor', 'colored-text', 'plain-text', 'plain']
Controls the button's appearance. This can be one of:
- "major": A highly visible button with bold visuals.
- "minor": A less visible button that doesn't stand out.
- "colored-text": A minimalistic button with bold text.
- "plain-text": A button with no background or border. Use this to blend less important buttons into the background.

color
rio.ColorSet
The color scheme to use for the button.

is_sensitive
bool
Whether the button should respond to user input.

is_loading
bool
Whether the button should display a loading indicator. Use this to indicate to the user that an action is currently running.

on_press
rio.EventHandler[[]]
Triggered when the user clicks on the button.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

Examples
1. Basic button with caption:
   rio.Button(
       "Click me!",
       on_press=lambda: print("Button pressed!"),
   )

2. Button with icon:
   rio.Button(
       "Click me!",
       icon="material/mouse",
       on_press=lambda: print("Button pressed!"),
   )

3. Button with a progress bar that slowly fills up as you click it:
   class ProgressButton(rio.Component):
       clicks: int = 0

       def _on_button_press(self) -> None:
           self.clicks += 1

       def build(self) -> rio.Component:
           return rio.Button(
               rio.Column(
                   rio.Text("Click repeatedly to fill up the progress bar"),
                   rio.ProgressBar(self.clicks / 10, min_width=15, min_height=1),
                   spacing=0.5,
                   margin=0.5,
               ),
               on_press=self._on_button_press,
               align_x=0.5,
               align_y=0.5,
           )