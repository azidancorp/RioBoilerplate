App
Contains all the information needed to run a Rio app.

Apps group all the information needed for Rio to run your application, such as its name, icon and, and the pages it contains. Apps also expose several lifetime events that you can use to perform tasks such as initialization and cleanup.

If you're serving your app as a website, all users share the same App instance. If running in a window, there's only one window, and thus App, anyway.

A basic setup may look like this:

Python

app = rio.App(
    name="My App",
    build=MyAppRoot,
)
You can then run this app, either as a local application in a window:

Python

app.run_in_window()
Or you can create and run a webserver:

Python

app.run_as_web_server()
Or create a server, without running it. This allows you to start the script externally with tools such as uvicorn:

Python

fastapi_app = app.as_fastapi()
Constructor
App(
    *, 
    build: Callable[[], rio.Component] | None = None, 
    name: str | None = None, 
    description: str | None = None, 
    icon: pathlib.Path | PIL.Image.Image | rio.URL | bytes | None = None, 
    pages: Iterable[rio.ComponentPage | rio.Redirect] | os.PathLike | str | None = None, 
    on_app_start: rio.EventHandler[rio.App] = None, 
    on_app_close: rio.EventHandler[rio.App] = None, 
    on_session_start: rio.EventHandler[rio.Session] = None, 
    on_session_close: rio.EventHandler[rio.Session] = None, 
    default_attachments: Iterable[Any] = (), 
    ping_pong_interval: int | float | datetime.timedelta = datetime.timedelta(seconds=50), 
    assets_dir: str | os.PathLike | None = None, 
    theme: rio.Theme | tuple[rio.Theme, rio.Theme] | None = None, 
    build_connection_lost_message: Callable[[], rio.Component] = <function make_default_connection_lost_component at 0x7f108086b240>, 
    meta_tags: dict[str, str] = {}, 
)
build
Callable[[], rio.Component] | None
A function that returns the root component of the app. This function will be called whenever a new session is created. Note that since classes are callable in Python, you can pass a class here instead of a function, so long as the class doesn't require any arguments.
If no build method is passed, the app will create a PageView as the root component.

name
str | None
The name to display for this app. This can show up in window titles, error messages and wherever else the app needs to be referenced in a nice, human-readable way. If not specified, Rio name will try to guess a name based on the name of the main Python file.

description
str | None
A short, human-readable description of the app. This can show up in search engines, social media sites and similar.

icon
pathlib.Path | PIL.Image.Image | rio.URL | bytes | None
The "favicon" to display for this app. This is a little image that shows up in the title bars of windows, browser tabs and similar similar.

pages
Iterable[rio.ComponentPage | rio.Redirect] | os.PathLike | str | None
The pages that make up this app. You can navigate between these using Session.navigate_to or using Link components. If running as website the user can also access these pages directly via their URL.
Per default, rio scans your project's "pages" directory for components decorated with @rio.page and turns them into pages. To override the location of this directory, you can provide a custom path.

on_app_start
rio.EventHandler[rio.App]
A function that will be called when the app is first started. You can use this to perform any initialization tasks that need to happen before the app is ready to use.
The app start will be delayed until this function returns. This makes sure initialization is complete before the app is displayed to the user. If you would prefer to perform initialization in the background try using asyncio.create_task to run your code in a separate task.

on_app_close
rio.EventHandler[rio.App]
A function that will be called right before the app shuts down. You can use this to clean up open resources like for example a database connection.

on_session_start
rio.EventHandler[rio.Session]
A function that will be called each time a new session is created. In the context of a website that would be each time a new user visits the site. In the context of a window there is only one session, so this will only be called once.
This function does not block the creation of the session. This is to make sure initialization code doesn't accidentally make the user wait.
Please note that the session is not fully initialized yet when this function is called. In particular, the session's active_page_url is set to whichever URL the client has requested, but before the guards have had a chance to redirect the user to another page.

on_session_close
rio.EventHandler[rio.Session]
A function that will be called each time a session ends. In the context of a website that would be each time a user closes their browser tab. In the context of a window this will only be called once, when the window is closed.

default_attachments
Iterable[Any]
A list of attachments that will be attached to every new session.

ping_pong_interval
int | float | datetime.timedelta
Rio periodically sends ping-pong messages between the client and server to prevent overzealous proxies from closing the connection. The default value should be fine for most deployments, but feel free to change it if your hosting provider deploys a particularly obnoxious proxy.

assets_dir
str | os.PathLike | None
The directory where the app's assets are stored. This allows you to conveniently access any images or other files that are needed by your app. If not specified, Rio will assume the assets are stored in a directory called "assets" in the same directory as the main Python file.

theme
rio.Theme | tuple[rio.Theme, rio.Theme] | None
The Theme for the app. You can also pass in a tuple of two themes, which will be used as the light mode theme and the dark mode theme.
build_connection_lost_message
Callable[[], rio.Component]
A function that creates a "Connection lost" error popup, in case you want to override the default one.

meta_tags
dict[str, str]
Arbitrary key-value pairs that will be included in the HTML header of the app. These are used by search engines and social media sites to display information about your page, such as the title and a short description.

Attributes

name
str
The name to display for this app. This can show up in window titles, error messages and wherever else the app needs to be referenced in a nice, human-readable way.

description
str
A short, human-readable description of the app. This can show up in search engines, social media sites and similar.

assets_dir
pathlib.Path
The directory where the app's assets are stored. This allows you to conveniently access any images or other files that are needed by your app.

pages
Sequence[rio.ComponentPage | rio.Redirect]
The pages that make up this app. You can navigate between these using Session.navigate_to or using Link components. If running as website the user can also access these pages directly via their URL.

meta_tags
dict[str, str]
Arbitrary key-value pairs that will be included in the HTML header of the app. These are used by search engines and social media sites to display information about your page, such as the title and a short description.

Functions

App.fetch_icon_png_blob
Fetches the app's icon as a PNG blob.
The result is cached. It will be loaded the first time you call this method, and then returned immediately on subsequent calls. If fetching the icon fails, the exception is also cached, and no further fetching attempts will be made.

Signature
async def fetch_icon_png_blob() -> bytes
App.fetch_icon_as_png_path
Fetches the app's icon and returns the path to it, as PNG file. This will take care of fetching it (if needed) and converting it to PNG.
If the icon file isn't local, it will be stored in a temporary directory. Note that since the result isn't a context manager, the file won't be deleted.
If the icon can't be fetched, a warning is displayed and None is returned.

Signature
async def fetch_icon_as_png_path() -> pathlib.Path | None

App.as_fastapi
Return a FastAPI instance that serves this app.
This method returns a FastAPI instance that serves this app. This allows you to run the app with a custom server, such as uvicorn:

Python
app = rio.App(
    name="My App",
    build=MyAppRoot,
)
fastapi_app = app.as_fastapi()
You can then run this app via uvicorn:
Bash
uvicorn my_app:fastapi_app
Signature
def as_fastapi(
    *, 
    base_url: rio.URL | str | None = None, 
) -> fastapi.applications.FastAPI

base_url
rio.URL | str | None
The base URL at which the app will be served. This is useful if you're running the app behind a reverse proxy like nginx and want to serve the app at a subpath. If provided, the URL must be absolute and cannot contain query parameters or fragments.
This parameter is experimental. Please report any issues you encounter. Minor releases may change the behavior of this parameter.

App.run_as_web_server
Creates and runs a webserver that serves this app.
This method creates and immediately runs a webserver that serves this app. This is the simplest way to run a Rio app.
Python
app = rio.App(
    name="My App",
    build=MyAppRoot,
)
app.run_as_web_server()
The will synchronously block until the server is shut down.

Signature
def run_as_web_server(
    *, 
    host: str = 'localhost', 
    port: int = 8000, 
    quiet: bool = False, 
    base_url: rio.URL | str | None = None, 
) -> None

host
str
Which IP address to serve the webserver on. localhost will make the service only available on your local machine. This is the recommended setting if running behind a proxy like nginx.

port
int
Which port the webserver should listen to.

quiet
bool
If True Rio won't send any routine messages to stdout. Error messages will be printed regardless of this setting.

base_url
rio.URL | str | None
The base URL at which the app will be served. This is useful if you're running the app behind a reverse proxy like nginx and want to serve the app at a subpath. If provided, the URL must be absolute and cannot contain query parameters or fragments.
This parameter is experimental. Please report any issues you encounter. Minor releases may change the behavior of this parameter.

App.run_in_browser
Runs an internal webserver and opens the app in the default browser.
This method creates and immediately runs a webserver that serves this app, and then opens the app in the default browser. This is a quick and easy way to access your app.

Python
app = rio.App(
    name="My App",
    build=MyAppRoot,
)
app.run_in_browser()

Signature
def run_in_browser(
    *, 
    host: str = 'localhost', 
    port: int | None = None, 
    quiet: bool = False, 
) -> None

host
str
Which IP address to serve the webserver on. localhost will make the service only available on your local machine. This is the recommended setting if running behind a proxy like nginx.

port
int | None
Which port the webserver should listen to. If not specified, Rio will choose a random free port.

quiet
bool
If True Rio won't send any routine messages to stdout. Error messages will be printed regardless of this setting.
App.run_in_window
Runs the app in a local window.
This method creates a window and displays the app in it. This is great if you don't want the complexity of running a web server, or wish to package your app as a standalone executable.
Python
app = rio.App(
    name="My App",
    build=MyAppRoot,
)
app.run_in_window()
This method requires the window extra. If you don't have it installed, you can install it with:

Bash
pip install "rio-ui[window]"
This method will synchronously block until the window is closed.

Signature
def run_in_window(
    *, 
    quiet: bool = True, 
    maximized: bool = False, 
    fullscreen: bool = False, 
    width: float | None = None, 
    height: float | None = None, 
) -> None

quiet
bool
If True Rio won't send any routine messages to stdout. Error messages will be printed regardless of this setting.

maximized
bool

fullscreen
bool

width
float | None

height
float | None