SwitcherBar
Displays a series of options and allows the user to switch between them.

A SwitcherBar displays a list of options and allows the user to select one of them. Each option has a name, value and optionally an icon. The selected option is highlighted and can be changed by the user.

Normally exactly one value is selected at all times. If allow_none is True, the user can also select no option at all. In this case, the selected_value will be None.


Constructor
SwitcherBar(
    values: Sequence[T], 
    *, 
    names: Sequence[str] | None = None, 
    icons: Sequence[str | None] | None = None, 
    color: rio.ColorSet = 'keep', 
    orientation: Literal['horizontal', 'vertical'] = 'horizontal', 
    spacing: float = 1.0, 
    allow_none: bool = False, 
    selected_value: T | None = None, 
    on_change: rio.EventHandler[rio.SwitcherBarChangeEvent[T]] = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)

values
Sequence[T]
The list of values which can be selected.
names
Sequence[str] | None
The list of names to display for each value. If None, the string representation of each value is used.
icons
Sequence[str | None] | None
The list of icons to display along with with each name.
color
rio.ColorSet
The color of the switcher bar.
orientation
Literal['horizontal', 'vertical']
The orientation of the switcher bar.
spacing
float
The spacing between options.
allow_none
bool
Whether the switcher bar can have no value selected.
selected_value
T | None
The currently selected value.
on_change
rio.EventHandler[rio.SwitcherBarChangeEvent[T]]
Triggered whenever the selected value changes.
key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.
margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size. Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment. Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.
min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size. Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment. Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.
grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.
grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.
align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.
align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

Examples
A simple switcher bar with three options:

Python
rio.SwitcherBar(
    values=[1, 2, 3],
    names=["A-SwitchName", "B-SwitchName", "C-SwitchName"],
    selected_value=1,
    on_change=lambda event: print(event.value),
)

You can use a SwitcherBar to create your own custom Navigation Bar. use the on_page_change event to trigger a refresh of the SwitcherBar when the page changes. Use the url_segment defined in your rio.App and rio.ComponentPage instances to navigate to the selected page. Here is an example of a custom NavigationBar component:

Python
class NavigationBar(rio.Component):
    # Make sure the navigation bar is updated, even if the user navigates
    # to another page by another means than the navbar itself.
    @rio.event.on_page_change
    async def _on_page_change(self) -> None:
        self.force_refresh()

    def on_change(self, event: rio.SwitcherBarChangeEvent) -> None:
        # The user has selected a new value. Navigate to the corresponding
        # page.
        assert isinstance(event.value, str)
        self.session.navigate_to(event.value)

    def build(self) -> rio.Component:
        return rio.Card(
            rio.Row(
                rio.Spacer(),
                rio.SwitcherBar(
                    # For the values, we'll use the URL segments of the
                    # pages in the app. This makes it easy to navigate
                    # to them.
                    values=["/", "first-page", "second-page"],
                    names=["Home", "First Page", "Second Page"],
                    selected_value=self.session.active_page_instances[
                        0
                    ].url_segment,
                    align_y=0.5,
                    color="primary",
                    on_change=self.on_change,
                ),
                margin=1,
                grow_x=True,
            ),
        )