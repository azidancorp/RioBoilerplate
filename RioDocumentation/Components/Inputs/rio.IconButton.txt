IconButton
A round, clickable button with an icon.

The IconButton component allows the user to trigger an action by clicking on it. You can use it to trigger a function call, navigate to a different page, or perform other actions.

It is similar to the Button component, but it is specifically designed to display an icon, and it has a round shape.


Constructor
IconButton(
    icon: str, 
    *, 
    style: Literal['major', 'minor', 'colored-text', 'plain-text', 'plain'] = 'major', 
    color: rio.ColorSet = 'keep', 
    is_sensitive: bool = True, 
    on_press: rio.EventHandler[[]] = None, 
    min_size: float = 3.7, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)
icon
str

The name of an icon to display on the button, in the form "set/name:variant". See the Icon component for details of how icons work in Rio.
style
Literal['major', 'minor', 'colored-text', 'plain-text', 'plain']
Controls the button's appearance. This can be one of:
"major": A highly visible button with bold visuals.
"minor": A less visible button that doesn't stand out.
"colored-text": A minimalistic button with bold text.
"plain-text": A button with no background or border. Use this to blend less important buttons into the background.

color
rio.ColorSet
The color scheme to use for the button.

is_sensitive
bool
Whether the button should respond to user input.

on_press
rio.EventHandler[[]]
Triggered when the user clicks on the button.

min_size
float
The minimum size of the button. This is the width & height of the button in font-size units.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.
Examples
This minimal example will simply display a IconButton with a castle icon:

Python

rio.IconButton(icon="material/castle")
IconButtons are commonly used to trigger actions. You can easily achieve this by adding a function call to on_press:

Python

class MyComponent(rio.Component):
    def on_press_button(self) -> None:
        print("Icon button pressed!")

    def build(self) -> rio.Component:
        return rio.IconButton(
            icon="material/castle",
            on_press=self.on_press_button,
        )
IconButtons are commonly used to trigger actions. You can easily achieve this by adding a function call to on_press. You can use a function call to update the banner text signaling that the button was pressed:

Python

class MyComponent(rio.Component):
    banner_text: str = ""

    def on_press_button(self) -> None:
        self.banner_text = "Icon button pressed!"

    def build(self) -> rio.Component:
        return rio.Column(
            rio.Banner(
                text=self.banner_text,
                style="info",
            ),
            rio.IconButton(
                icon="material/castle",
                on_press=self.on_press_button,
            ),
            spacing=1,
        )