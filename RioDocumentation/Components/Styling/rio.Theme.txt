Theme
Defines the visual style of the application.

The Theme contains all colors, text styles, and other visual properties that are used throughout the application. If you wish to change the appearance of your app, this is the place to do it.

Warning: The exact attributes available in themes are still subject to change. The recommended way to create themes is using either the from_colors or pair_from_colors method, as they provide a more stable interface.

Attributes
primary_palette
rio.Palette
The primary color palette.

secondary_palette
rio.Palette
The secondary color palette.

background_palette
rio.Palette
The background color palette.

neutral_palette
rio.Palette
The neutral color palette.

hud_palette
rio.Palette
The HUD color palette.

disabled_palette
rio.Palette
The disabled color palette.

success_palette
rio.Palette
The success color palette.

warning_palette
rio.Palette
The warning color palette.

danger_palette
rio.Palette
The danger color palette.

corner_radius_small
float
The corner radius for small elements.

corner_radius_medium
float
The corner radius for medium elements.

corner_radius_large
float
The corner radius for large elements.

shadow_color
rio.Color
The color used for shadows.

monospace_font
rio.Font
The monospace font used in the theme.

heading1_style
rio.TextStyle
The text style for heading level 1.

heading2_style
rio.TextStyle
The text style for heading level 2.

heading3_style
rio.TextStyle
The text style for heading level 3.

text_style
rio.TextStyle
The default text style.

is_light_theme
read-only
bool
Whether this is a light theme.

primary_color
read-only
rio.Color
The primary color.

secondary_color
read-only
rio.Color
The secondary color.

background_color
read-only
rio.Color
The background color.

neutral_color
read-only
rio.Color
The neutral color.

hud_color
read-only
rio.Color
The HUD color.

disabled_color
read-only
rio.Color
The disabled color.

success_color
read-only
rio.Color
The success color.

warning_color
read-only
rio.Color
The warning color.

danger_color
read-only
rio.Color
The danger color.

font
read-only
rio.Font
The default font.

Functions
Theme.from_colors
classmethod
Creates a new theme based on the provided colors.

Themes store a large number of colors and text styles that are used throughout the app. This function provides a convenient way to only specify the most important colors of your theme, and have Rio handle the rest. It is the recommended way to create a new theme.

To use a custom theme in your app first create a theme, and then pass it to your app instance

Python

# Create a new theme
theme = rio.Theme.from_colors(
    # Configure your theme here
)

# And apply it to your app
app = rio.App(
    theme=theme,
    # ...
)
Alternatively, there is also pair_from_colors, which creates both a light and a dark theme at the same time. This is useful if you want Rio to automatically switch between the two based on the user's system preferences.

Signature
@classmethod
def from_colors(
    *, 
    primary_color: rio.Color | None = None, 
    secondary_color: rio.Color | None = None, 
    background_color: rio.Color | None = None, 
    neutral_color: rio.Color | None = None, 
    hud_color: rio.Color | None = None, 
    disabled_color: rio.Color | None = None, 
    success_color: rio.Color | None = None, 
    warning_color: rio.Color | None = None, 
    danger_color: rio.Color | None = None, 
    corner_radius_small: float = 0.4, 
    corner_radius_medium: float = 0.8, 
    corner_radius_large: float = 1.8, 
    heading_fill: Literal['primary', 'plain', 'auto'] | rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.Color = 'auto', 
    text_color: rio.Color | None = None, 
    font: rio.Font = rio.Font.ROBOTO, 
    monospace_font: rio.Font = rio.Font.ROBOTO_MONO, 
    mode: Literal['light', 'dark'] = 'light', 
) -> rio.Theme
primary_color
rio.Color | None
The main color of your app. This color will be used to tint the background and by some large components to fill large spaces with color.

secondary_color
rio.Color | None
A color that nicely complements the primary color. It is often used by small components such as buttons and switches.

background_color
rio.Color | None
The app's background color. This should be a neutral color that doesn't distract from the content.

neutral_color
rio.Color | None
Similar to the background color, it is also used for neutral areas. It should however be slightly different, allowing you to create a visual hierarchy. This is the default color of large elements such as cards.

hud_color
rio.Color | None
Used for elements that pop over the content, such as tooltips.

disabled_color
rio.Color | None
Used by insensitive components to indicate that they are not interactive. Typically a shade of grey.

success_color
rio.Color | None
A color to give positive feedback the user. Typically a shade of green.

warning_color
rio.Color | None
A color to indicate that something might be wrong, but isn't critical. Typically orange.

danger_color
rio.Color | None
A color to indicate that something is wrong and needs immediate attention. Typically a shade of red.

corner_radius_small
float
The corner radius of small components such as text inputs

corner_radius_medium
float
The corner radius of medium-sized components, such as small cards.

corner_radius_large
float
The corner radius of large components, such as large cards and dialogs.

heading_fill
Literal['primary', 'plain', 'auto'] | rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.Color
The fill to use for headings. This allows you to specify a more interesting color, or even a gradient. If set to "auto", Rio will automatically switch between the primary color and a plain text color based on legibility.

This only affects headings in background and neutral contexts.

text_color
rio.Color | None
The default text color to use for regular text. Please note that this only applies to text in a neutral or background context. Text that's e.g. placed on a rio.Card with color="primary" will use a different color to ensure legibility.

font
rio.Font
The default font to use when no other is specified.

monospace_font
rio.Font
The font to use for monospace text, such as code.

mode
Literal['light', 'dark']
Whether to create a light or dark theme. This affects the default values for some colors, such as the background.

Theme.pair_from_colors
classmethod
This function is very similar to from_colors, but it returns two themes: A light and a dark one. When applying two themes to your app, Rio will automatically switch between them based on the user's system preferences.

Python

# Create a theme pair
themes = rio.Theme.pair_from_colors(
    # Configure your theme here
)

# And apply them to your app
app = rio.App(
    theme=themes,
    # ...
)
Signature
@classmethod
def pair_from_colors(
    *, 
    primary_color: rio.Color | None = None, 
    secondary_color: rio.Color | None = None, 
    background_color: rio.Color | None = None, 
    neutral_color: rio.Color | None = None, 
    hud_color: rio.Color | None = None, 
    disabled_color: rio.Color | None = None, 
    success_color: rio.Color | None = None, 
    warning_color: rio.Color | None = None, 
    danger_color: rio.Color | None = None, 
    corner_radius_small: float = 0.4, 
    corner_radius_medium: float = 0.8, 
    corner_radius_large: float = 1.8, 
    text_color: rio.Color | tuple[rio.Color | None, rio.Color | None] | None = None, 
    font: rio.Font = rio.Font.ROBOTO, 
    monospace_font: rio.Font = rio.Font.ROBOTO_MONO, 
    heading_fill: Literal['primary', 'plain', 'auto'] | rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.Color = 'auto', 
) -> tuple[rio.Theme, rio.Theme]
primary_color
rio.Color | None
The main color of your app. This color will be used to tint the background and by some large components to fill large spaces with color

secondary_color
rio.Color | None
A color that nicely complements the primary color. It is often used by small components such as buttons and switches.

background_color
rio.Color | None
The app's background color. This should be a neutral color that doesn't distract from the content.

neutral_color
rio.Color | None
Similar to the background color, it is also used for neutral areas. It should however be slightly different, allowing you to create a visual hierarchy. This is the default color of large elements such as cards.

hud_color
rio.Color | None
Used for elements that pop over the content, such as tooltips.

disabled_color
rio.Color | None
Used by insensitive components to indicate that they are not interactive. Typically a shade of grey.

success_color
rio.Color | None
A color to give positive feedback the user. Typically a shade of green.

warning_color
rio.Color | None
A color to indicate that something might be wrong, but isn't critical. Typically orange.

danger_color
rio.Color | None
A color to indicate that something is wrong and needs immediate attention. Typically a shade of red.

corner_radius_small
float
The corner radius of small components such as text inputs

corner_radius_medium
float
The corner radius of medium-sized components, such as small cards.

corner_radius_large
float
The corner radius of large components, such as large cards and dialogs.

text_color
rio.Color | tuple[rio.Color | None, rio.Color | None] | None
The default text color to use for regular text. Please note that this only applies to text in a neutral or background context. Text that's e.g. placed on a rio.Card with color="primary" will use a different color to ensure legibility.

You can also specify a tuple of two colors to use different text colors for light and dark themes.

font
rio.Font
The default font to use when no other is specified.

monospace_font
rio.Font
The font to use for monospace text, such as code.

heading_fill
Literal['primary', 'plain', 'auto'] | rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.Color
The fill to use for headings. This allows you to specify a more interesting color, or even a gradient. If set to "auto", Rio will automatically switch between the primary color and a plain text color based on legibility.

This only affects headings in background and neutral contexts.

Theme.text_color_for
Given the color of a background, return a legible text color to use on top of it.

Signature
def text_color_for(color: rio.Color) -> rio.Color
color
rio.Color
