FilePickerArea
Drag & Drop are for files

The FilePickerArea component allows the user to upload files either by dragging and dropping them onto the component, or optionally using a regular file browser. Whenever a file has been uploaded, the on_file_upload event is triggered, allowing you to run code.

This component is experimental and may change in the future

Experimental components are included in Rio to gather feedback and real-world usage data. They may be removed or changed in the future. If you use this component you might have to update your code when you upgrade to a newer version of Rio.

Constructor
FilePickerArea(
    content: str | rio.Component | None = None, 
    *, 
    file_types: list[str] | None = None, 
    multiple: bool = False, 
    files: list[rio.FileInfo] = [], 
    on_pick_file: rio.EventHandler[rio.FilePickEvent] = None, 
    on_remove_file: rio.EventHandler[rio.FilePickEvent] = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)

content
str | rio.Component | None
The text or component to display inside the link.

file_types
list[str] | None
A list of file extensions which the user is allowed to select. Defaults to None, which means that the user may select any file. Values can be passed as file extensions, ('pdf', '.pdf', '*.pdf' are all accepted) or MIME types (e.g. 'application/pdf').

Note that there is no way for Rio to enforce the file type. Users will always be able to upload arbitrary files, e.g. by renaming them. Treat this as a hint to the user, and so the file browser may filter files, but not as a security measure.

multiple
bool
Whether the user is allowed to pick multiple files at once. If False, a maximum of one file can be picked at a time.

files
list[rio.FileInfo]
The list of files that have been picked.

on_pick_file
rio.EventHandler[rio.FilePickEvent]
Event handler that is called when a file is picked.

on_remove_file
rio.EventHandler[rio.FilePickEvent]
Event handler that is called when a file is removed.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.