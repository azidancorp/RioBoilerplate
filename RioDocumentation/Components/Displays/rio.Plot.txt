Plot
Displays a matplotlib, seaborn or plotly plot.

Plots are a very useful tool to visualize data. Not only that, but having a pretty graph in your app is a great way to make it more engaging and beautiful.

Rio supports the most popular Python plotting libraries around: It can display plots made with matplotlib, seaborn, as well as plotly. Create a plot using the library of your choice and pass it to the Plot component to display it in your app.

Plots created with plotly will be interactive when displayed in Rio. We recommend using it over the other options.

Constructor
Plot(
    figure: plotly.graph_objs._figure.Figure | matplotlib.figure.Figure | matplotlib.axes._axes.Axes, 
    *, 
    background: rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.FrostedGlassFill | rio.Color | None = None, 
    corner_radius: float | tuple[float, float, float, float] | None = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)

figure
plotly.graph_objs._figure.Figure | matplotlib.figure.Figure | matplotlib.axes._axes.Axes
The plot figure to display.

background
rio.SolidFill | rio.LinearGradientFill | rio.ImageFill | rio.FrostedGlassFill | rio.Color | None
The background color of the plot. If None, a color from the theme is used.

corner_radius
float | tuple[float, float, float, float] | None
The corner radius of the plot

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

Examples
Here's a minimal example using a plotly plot. Using plotly is recommended, because the resulting plots are interactive.

Python

import pandas as pd
import plotly.express as px

class MyComponent(rio.Component):
    def build(self) -> rio.Component:
        df = pd.DataFrame(
            {
                "x": [1, 2, 3, 4],
                "y": [4, 3, 2, 1],
            }
        )
        fig = px.line(
            df,
            x="x",
            y="y",
        )

        return rio.Plot(
            fig,
            # Set the size of the plot, because default is 0
            min_width=10,
            min_height=10,
            align_x=0.5,
            align_y=0.5,
        )
Matplotlib plots are also supported:

Python

import pandas as pd
import matplotlib.pyplot as plt

class MyComponent(rio.Component):
    def build(self) -> rio.Component:
        df = pd.DataFrame(
            {
                "x": [1, 2, 3, 4],
                "y": [4, 3, 2, 1],
            }
        )

        # Create a figure and add a plot to it
        fig = plt.figure()
        plt.plot(df)

        return rio.Plot(
            fig,
            # Set the size of the plot, because default is 0
            min_width=10,
            min_height=10,
            align_x=0.5,
            align_y=0.5,
        )
As well as seaborn plots:

Python

import pandas as pd
import seaborn as sns

class MyComponent(rio.Component):
    def build(self) -> rio.Component:
        df = pd.DataFrame(
            {
                "x": [1, 2, 3, 4],
                "y": [4, 3, 2, 1],
            }
        )
        fig = sns.lineplot(
            df,
            x="x",
            y="y",
        )

        return rio.Plot(
            fig,
            # Set the size of the plot, because default is 0
            min_width=10,
            min_height=10,
            align_x=0.5,
            align_y=0.5,
        )