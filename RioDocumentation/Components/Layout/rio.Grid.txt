Grid
A container which arranges its children in a table-like grid.

Grids arrange their children in a table-like grid. Each child is placed in one or more cells of the grid. You can add children to the grid either by passing them into the constructor or by using the Grid.add method.

To get full control over where children are placed, use grid.add. It returns the grid itself, so you can chain multiple add calls together for concise code.

If you don't need all of that control, a convenient way of populating grids is by passing all children directly into the constructor. Grid accepts both individual components, as well as lists of components. Each value is interpreted as a single row of the grid, and the grid adjusted so that all rows fill the entire space evenly.

Constructor
Grid(
    *rows: rio.Component | Iterable[rio.Component], 
    row_spacing: float = 0.0, 
    column_spacing: float = 0.0, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)

rows
rio.Component | Iterable[rio.Component]
Each value is interpreted as a single row of the grid, and the grid is adjusted so that all rows fill the entire space evenly.

row_spacing
float
The amount of space between rows of the grid.

column_spacing
float
The amount of space between columns of the grid.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

Functions
Grid.add
Add a child component to the grid

Adds a child to the grid at the specified location. Children can span multiple rows or columns by setting the width and height parameters.

Note that this method returns the Grid instance afterwards, allowing you to chain multiple add calls together for concise code.

Example
Python

grid = rio.Grid(row_spacing=1, column_spacing=1)
grid.add(rio.Text("Hello"), row=0, column=0)

Signature
def add(
    child: rio.Component, 
    row: int, 
    column: int, 
    *, 
    width: int = 1, 
    height: int = 1, 
) -> Self
child
rio.Component

The child component to add to the grid.

row
int

The row in which to place the child.

column
int

The column in which to place the child.

width
int

The number of columns the child should take up.

height
int

The number of rows the child should take up.

Examples
This code creates a grid layout with two rows and two columns, and adds children to the grid by passing them in as a list:

Python

rio.Grid(
    [rio.Text("Hello"), rio.Text("World!")],  # 1. Row
    [rio.Text("Foo"), rio.Text("Bar")],  # 2. Row
)

Alternatively, you can use the add method to add children to the grid. Here's how you can do it:

Python

grid = rio.Grid(row_spacing=1, column_spacing=1)
grid.add(rio.Text("Hello"), row=0, column=0)
grid.add(rio.Text("World!"), row=0, column=1)
grid.add(rio.Text("Foo"), row=1, column=0)
grid.add(rio.Text("Bar"), row=1, column=1)

In your Component class, you can use the add method within the build function to add children to the grid. Here's how you can do it:

Python

class MyComponent(rio.Component):
    def build(self) -> rio.Component:
        grid = rio.Grid(row_spacing=1, column_spacing=1)
        grid.add(rio.Text("Hello"), row=0, column=0)
        grid.add(rio.Text("World!"), row=0, column=1)
        grid.add(rio.Text("Foo"), row=1, column=0)
        grid.add(rio.Text("Bar"), row=1, column=1)

        return grid