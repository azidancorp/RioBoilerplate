Session
Represents a single client connection to the app.

A session corresponds to a single connection to a client. It maintains all state related to this client including local settings, the currently active page, and others.

Sessions are created automatically by the app and should not be created manually.

Attributes
timezone
datetime.tzinfo
The timezone the connected client is in. You can use this to display times in the client's local time.

preferred_languages
Sequence[str]
The languages preferred by the client. Use this to present content in the most convenient language for your users. The values are ordered with the most preferred language first.
This always contains at least one langauge.
The values are in the format language-region, e.g. en-US for American English. The full specification is defined in RFC 5646.

window_width
float
The width of the client's window in pixels. Like all units in Rio, this is measured in font-heights.

window_height
float
The height of the client's window in pixels. Like all units in Rio, this is measured in font-heights.

theme
rio.Theme
The theme that the client is using. If you've passed both a light and dark theme into the app, this will be the one which is actually used by the client.

http_headers
Mapping[str, str]
The HTTP headers sent by the client. This is a read-only, case-insensitive dictionary.

app
read-only
rio.App
Each app can have multiple sessions. Each session belongs to one app. This property provides access to the rio.App instance that this session belongs to.

assets
read-only
pathlib.Path
When creating an app, a path can be provided to its asset directory. This property holds the pathlib.Path to the App's asset directory.
This allows you to access assets by simply typing self.session.assets / "my-asset.png" to obtain the path of an asset file.

running_in_window
read-only
bool
True if the app is running in a local window, and False if it is hosted as a website.

running_as_website
read-only
bool
True if the app is running as a website, and False if it is running in a local window.

base_url
read-only
rio.URL
The location the app is hosted at. This is useful if you're hosting the same app at multiple domains, or if your app is hosted at a subdirectory of a domain.
This URL is always absolute and has neither query parameters nor a fragment. Only available when running as a website.

active_page_url
read-only
rio.URL
This value contains the URL of the currently active page. The URL is always absolute.
This property is read-only. To change the page, use Session.navigate_to.

active_page_instances
read-only
tuple[rio.ComponentPage, ...]
This value contains all rio.ComponentPage instances that are currently active. The reason multiple pages may be active at the same time, is that a page may contain a rio.PageView itself. For example, if a user is on /foo/bar/baz, then this property will contain the rio.ComponentPage instances for foo, bar, and baz.
This property is read-only. To change the page, use Session.navigate_to.

client_ip
read-only
str
This is the public IP address of the connected client.
Only available when running as a website.

client_port
read-only
int
This is the port of the connected client.
Only available when running as a website.

user_agent
read-only
str
This contains the user agent string sent by the client's browser. User agents contain a wealth of information regarding the client's device, operating system, browser and more. This information can be used to tailor the app's appearance and behavior to the client's device.

Functions
Session.attach
Attaches the given value to the Session. It can be retrieved later using session[...].

Signature
def attach(value: Any) -> None
value
Any
The value to attach.

Session.detach
Removes an attachment from this session.

Signature
def detach(typ: type) -> None
typ
type

Session.close
Ends the session, closing any window or browser tab.

Signature
def close() -> None

Session.url_for_asset
Returns the URL for the given asset file. The asset must be located in the app's assets_dir.

Signature
def url_for_asset(asset: pathlib.Path) -> rio.URL
asset
pathlib.Path
The file path of the asset whose URL you need.

Session.create_task
Creates an asyncio.Task that is cancelled when the session is closed.

This is identical to asyncio.create_task, except that any tasks are automatically cancelled when the session is closed. This makes sure that old tasks don't keep piling up long after they are no longer needed.

Signature
def create_task(
    coro: Coroutine[Any, None, T], 
    *, 
    name: str | None = None, 
) -> asyncio.Task[T]
coro
Coroutine[Any, None, T]
The coroutine to run.

name
str | None
An optional name for the task. Assigning descriptive names can be helpful when debugging.

Session.navigate_to
Switches the app to display the given page URL.

Switches the app to display the given page URL. If replace is True, the browser's most recent history entry is replaced with the new page. This means that the user can't go back to the previous page using the browser's back button. If False, a new history entry is created, allowing the user to go back to the previous page.

Signature
def navigate_to(
    target_url: rio.URL | str, 
    *, 
    replace: bool = False, 
) -> None
target_url
rio.URL | str
The URL of the page to navigate to.

replace
bool
If True, the browser's most recent history entry is replaced with the new page. If False, a new history entry is created, allowing the user to go back to the previous page.

Session.set_title
Changes the window title of this session.

Signature
async def set_title(title: str) -> None
title
str
The new window title.

Session.pick_file
Open a file picker dialog.

This function opens a file picker dialog, allowing the user to pick a file. The selected file is returned, allowing you to access its contents. See also save_file, if you want to save a file instead of opening one.

Signature
def pick_file(
    *, 
    file_types: Iterable[str] | None = None, 
    multiple: bool = False, 
) -> rio.FileInfo | list[rio.FileInfo]
file_types
Iterable[str] | None
A list of file extensions which the user is allowed to select. Defaults to None, which means that the user may select any file. Values can be passed as file extensions, ('pdf', '.pdf', '*.pdf' are all accepted) or MIME types (e.g. 'application/pdf').

Note that there is no way for Rio to enforce the file type. Users will always be able to upload arbitrary files, e.g. by renaming them. Treat this as a hint to the user, and so the file browser may filter files, but not as a security measure.

multiple
bool
Whether the user should pick a single file, or multiple.

Session.file_chooser
This function has been renamed. Use pick_file instead.

Signature
def file_chooser(
    *args, 
    **kwargs, 
) -> rio.FileInfo | list[rio.FileInfo]
args
Any

kwargs
Any

Session.save_file
Save a file to the user's device.

This function allows you to save a file to the user's device. The user will be prompted to select a location to save the file to.

See also pick_file if you want to open a file instead of saving one.

Signature
async def save_file(
    file_contents: pathlib.Path | str | bytes, 
    file_name: str = 'Unnamed File', 
    *, 
    media_type: str | None = None, 
    directory: pathlib.Path | None = None, 
) -> None
file_contents
pathlib.Path | str | bytes
The contents of the file to save. This can be a string, bytes, or a path to a file on the server.

file_name
str
The default file name that will be displayed in the file dialog. The user can freely change it.

media_type
str | None
The media type of the file. Defaults to None, which means that the media type will be guessed from the file name.

directory
pathlib.Path | None
The directory where the file dialog should open. This has no effect if the user is visiting the app in a browser.

Session.show_custom_dialog
Displays a custom dialog.

This function displays a dialog to the user. This will call the build function and use its result as the content of the dialog. The content will be assigned the full size of the screen. This allows you to position the dialog yourself, using the align and margin properties of your component.

Note: Dialogs are useful if you need to show components without returning them from the build method. A good example is asking for confirmation from an event handler, without having to rebuild the component. If you can return components from the build method, rio.Popup is often an easier choice (set position to "fullscreen" to get a similar look to dialogs).

Note: If spawning many dialogs (for example when creating one for each item inside of a CRUD application) dialogs can be faster than rio.Popup, because dialogs only have to build their children when they're opened, while rio.Popup has its children built immediately, for every single item in the list.

The result of this function is an instance of rio.Dialog, which can be used to interact with the dialog programmatically. For example, you can close the dialog or wait for it to be closed.

Dialogs can store a result value, which can be retrieved by calling Dialog.wait_for_close. This allows you to easily wait for the dialog to disappear, and also get a return value while you're at it. See the example below for details.

Example
This example demonstrates how to spawn a custom dialog that allows the user to select a value from a Dropdown menu. Once the user selects an option, the dialog closes, and the selected value is returned.

Python

class MyComponent(rio.Component):
    value: str = "Vanilla"

    async def _create_dialog(self, options: list[str]) -> str | None:
        # This function will be called to create the dialog's content.
        # It builds up a UI using Rio components, just like a regular
        # `build` function would.
        def build_dialog_content() -> rio.Component:
            # Build the dialog
            return rio.Card(
                rio.Column(
                    rio.Text(
                        "Which ice cream would you like?",
                        align_x=0.5,
                    ),
                    rio.Dropdown(
                        label="ice cream",
                        options=options,
                        selected_value=self.value,
                        on_change=on_value_change,
                    ),
                    spacing=1,
                    margin=2,
                ),
                align_x=0.5,
                align_y=0.5,
            )

        async def on_value_change(event: rio.DropdownChangeEvent) -> None:
            # This function will be called whenever the user selects an
            # Item. It simply closes the dialog with the selected value.
            await dialog.close(event.value)

        # Show the dialog
        dialog = await self.session.show_custom_dialog(
            build=build_dialog_content,
            # Prevent the user from interacting with the rest of the app
            # while the dialog is open
            modal=True,
            # Don't close the dialog if the user clicks outside of it
            user_closeable=False,
        )

        # Wait for the user to select an option
        result = await dialog.wait_for_close()

        # Return the selected value
        return result

    async def on_spawn_dialog(self) -> None:
        # Show a dialog and wait for the user to make a choice
        value = await self._create_dialog(
            options=["Vanilla", "Chocolate", "Strawberry"],
        )

        # Store the value, but only if one was selected. If the dialog
        # gets closed without a selection, `value` will be `None`.
        if value is not None:
            self.value = value

    def build(self) -> rio.Component:
        return rio.Column(
            rio.Button(
                "Open Dialog",
                on_press=self.on_spawn_dialog,
            ),
            rio.Text(f"You've chosen: {self.value}"),
        )
This method is experimental and may change in the future

Experimental methods are included in Rio to gather feedback and real-world usage data. They may be removed or changed in the future. If you use this method you might have to update your code when you upgrade to a newer version of Rio.

Signature
async def show_custom_dialog(
    build: Callable[[], rio.Component], 
    *, 
    modal: bool = True, 
    user_closeable: bool = True, 
    on_close: rio.EventHandler[[]] = None, 
    owning_component: rio.Component | None = None, 
) -> rio.Dialog
build
Callable[[], rio.Component]
A function which creates the component to be displayed in the dialog. Please note that this is a function, not a component. You can of course pass a component class as this function, as long as the constructor doesn't require any arguments.

modal
bool
Whether the dialog should prevent interactions with the rest of the app while it is open. If this is set, the background will also be darkened, to guide the user's focus to the dialog.

user_closeable
bool
Whether the user can close the dialog, e.g by clicking outside of it.

on_close
rio.EventHandler[[]]
An event handler which is called when the dialog is closed. This will not be called if you explicitly remove the dialog by calling dialog.close().

owning_component
rio.Component | None
If provided, the dialog will close automatically should the owning component be destroyed. This is useful if you want a dialog to disappear when a user e.g. navigates away from the current page.

Session.show_yes_no_dialog
Displays a simple dialog with a yes and no button.

This is a convenience function which displays a simple dialog to the user, with a "Yes" and "No" button. The user can select one of the options, and the function will return True or False respectively. If the user closes the dialog without selecting an option, None is returned instead.

The button texts and colors can be customized.

Example
Here's a simple example that demonstrates how to spawn a dialog where the user can select a boolean value:

Python

class MyComponent(rio.Component):
    selected_value: bool = False

    async def on_spawn_dialog(self) -> None:
        # Display a dialog and wait until the user makes a choice.
        # Since `show_yes_no_dialog` is an asynchronous function, the
        # `on_spawn_dialog` function must also be asynchronous.
        selected_value = await self.session.show_yes_no_dialog(
            title="This is a Dialog",
            text="Do you like ice cream?",
        )

        # Store the value, but only if one was selected. If the dialog gets
        # closed without a selection, `selected_value` will be `None`.
        if selected_value is not None:
            self.selected_value = selected_value

    def build(self) -> rio.Component:
        return rio.Column(
            rio.Button(
                "Open Dialog",
                on_press=self.on_spawn_dialog,
            ),
            rio.Text(f"You've selected: {self.selected_value}"),
        )
This method is experimental and may change in the future

Experimental methods are included in Rio to gather feedback and real-world usage data. They may be removed or changed in the future. If you use this method you might have to update your code when you upgrade to a newer version of Rio.

Signature
async def show_yes_no_dialog(
    text: str, 
    *, 
    title: str | None = None, 
    icon: str | None = None, 
    default: bool | None = None, 
    yes_text: str = 'Yes', 
    no_text: str = 'No', 
    yes_color: rio.ColorSet = 'keep', 
    no_color: rio.ColorSet = 'keep', 
    owning_component: rio.Component | None = None, 
) -> bool | None
text
str
A markdown string to display below the title. This should explain to the user what the dialog is about.

title
str | None
A heading to display at the top of the dialog.

icon
str | None
An icon to display next to the title.

default
bool | None
The option the user is likely to take. This will highlight the respective button.

yes_text
str
The text to display on the "Yes" button.

no_text
str
The text to display on the "No" button.

yes_color
rio.ColorSet
The color of the "Yes" button.

no_color
rio.ColorSet
The color of the "No" button.

owning_component
rio.Component | None
If provided, the dialog will close automatically should the owning component be destroyed. This is useful if you want a dialog to disappear when a user e.g. navigates away from the current page.

Session.set_clipboard
Copies the given text to the client's clipboard.

Signature
async def set_clipboard(text: str) -> None
text
str
The text to copy to the clipboard.

Session.get_clipboard
Gets the current text from the client's clipboard.

Signature
async def get_clipboard() -> str | None
