ListView
Vertically arranges and styles its children.

Lists of items are a common pattern in user interfaces. Whether you need to display a list of products, messages, or any other kind of data, the ListView component is here to help.

List views are similar to columns, in that they arrange their children vertically. However, they also apply a default style to their content which allows you to group items together in a visually distinct way.

Rio ships with several components which are meant specifically to be used inside of ListViews:
SimpleListItem: A typical list item which can display text, subtext and icons.
CustomListItem: A list item which can display any component as its content, while still applying the typical list item theming and layout.
HeadingListItem: For labelling groups of similar items.
SeparatorListItem: Leaves a gap between items, so you can group them visually.

Constructor
ListView(
    *children: rio.Component, 
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)

children
rio.Component
The children to display in the list.

key
str | int | None
A unique key for this component. If the key changes, the component will be destroyed and recreated. This is useful for components which maintain state across rebuilds.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

Functions
ListView.add
Appends a child component.

Appends a child component to the end and then returns the ListView, which makes method chaining possible:

rio.ListView().add(child1).add(child2)

Signature
def add(child: rio.Component) -> Self
child
rio.Component
The child component to append.

Examples
This example will display a list of two products:

rio.ListView(
    rio.SimpleListItem("Product 1", key="item1"),
    rio.SimpleListItem("Product 2", key="item2"),
)

ListViews are commonly used to display lists of dynamic length. You can easily achieve this by first creating a ListView, then adding the children after the fact:

import functools

class MyComponent(rio.Component):
    products: list[str] = ["Product 1", "Product 2", "Product 3"]

    def on_press_heading_list_item(self, product: str) -> None:
        print(f"Selected {product}")

    def build(self) -> rio.Component:
        # First create the ListView
        result = rio.ListView()

        # Then add the children one by one
        for product in self.products:
            result.add(
                rio.SimpleListItem(
                    text=product,
                    key=product,
                    # Note the use of `functools.partial` to pass the
                    # product to the event handler.
                    on_press=functools.partial(
                        self.on_press_heading_list_item,
                        product=product,
                    ),
                )
            )

        return result