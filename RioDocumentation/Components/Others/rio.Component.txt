Component
Base class for all Rio components.

Components are the building blocks of all Rio apps. Rio already ships with many useful components out of the box, but you can also subclass rio.Component to create your own.

Components all follow the same basic structure.

Class Header
Attribute (with type annotations!)
custom functions and event handlers
build method
Here's a basic example

Python

class HelloComponent(rio.Component):
    # List all of the components attributes here
    name: str

    # Define the build function. It is called when the component is created
    # or any of its attributes have changed
    def build(self) -> rio.Component:
        return rio.Text(f"Hello, {self.name}!")
Notice that there is no __init__ method. That's because all Rio components are automatically dataclasses. This means that you can just list the attributes of your component as class variables, and Rio will automatically create a constructor for you.

In fact, never write an __init__ method for a Rio component unless you know what you're doing. If you do need custom code to run during construction, use the __post_init__ method instead. Here's another example, with a custom __post_init__ method:

Python

class HelloComponent(rio.Component):
    name: str
    greeting: str = ""

    # In order to run custom code during initialization, create a
    # `__post_init__` method. This method is called after all internal
    # setup is done, so you are free to access your finished component.
    def __post_init__(self) -> None:
        # If the caller hasn't provided a greeting, we'll make one up
        # based on the connected user's language
        if self.greeting:
            return

        if self.session.preferred_languages[0].startswith("de"):
            self.greeting = "Hallo"
        elif self.session.preferred_languages[0].startswith("es"):
            self.greeting = "Hola"
        elif self.session.preferred_languages[0].startswith("fr"):
            self.greeting = "Bonjour"
        else:
            self.greeting = "Hello"

    def build(self) -> rio.Component:
        return rio.Text(f"{self.greeting}, {self.name}!")
This example initializes allows the user to provide a custom greeting, but if they don't, it will automatically choose a greeting based on the user's language. This needs custom code to run during initialization, so we use __post_init__.

Constructor
abstract Component(
    *, 
    key: str | int | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin: float | None = None, 
)
key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.
min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size. Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment. Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.
min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size. Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment. Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.
grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.
grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.
align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.
align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.
margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.
margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

Functions
Component.build
Return a component tree which represents the UI of this component.

Most components define their appearance and behavior by combining other, more basic components. This function's purpose is to do exactly that. It returns another component (typically a container) which will be displayed on the screen.

The build function should be pure, meaning that it does not modify the component's state and returns the same result each time it's invoked.

Signature
def build() -> rio.Component
Component.call_event_handler
Calls an even handler, awaiting it if necessary.

Call an event handler, if one is present. Await it if necessary. Log and discard any exceptions. If event_data is present, it will be passed to the event handler.

Signature
async def call_event_handler(
    handler: Callable[..., Any | Awaitable[Any]] | None, 
    *event_data: object, 
) -> None
handler
Callable[..., Any | Awaitable[Any]] | None

The event handler (function) to call.

event_data
object

Arguments to pass to the event handler.

Component.force_refresh
Force a rebuild of this component.

Most of the time components update automatically when their state changes. However, some state mutations are invisible to Rio: For example, appending items to a list modifies the list, but since no list instance was actually assigned to th component, Rio will be unaware of this change.

In these cases, you can force a rebuild of the component by calling force_refresh. This will trigger a rebuild of the component and display the updated version on the screen.

Another common use case is if you wish to update an component while an event handler is still running. Rio will automatically detect changes after event handlers return, but if you are performing a long-running operation, you may wish to update the component while the event handler is still running. This allows you to e.g. update a progress bar while the operation is still running.

Signature
async def force_refresh() -> None