TextInput
A user-editable text field.

TextInput allows the user to enter a short text. The text can either be shown in plain text, or hidden when used for passwords or other sensitive information.

Constructor
TextInput(
    text: str = '', 
    *, 
    label: str = '', 
    accessibility_label: str = '', 
    style: Literal['underlined', 'rounded', 'pill'] = 'underlined', 
    prefix_text: str = '', 
    suffix_text: str = '', 
    is_secret: bool = False, 
    is_sensitive: bool = True, 
    is_valid: bool = True, 
    on_change: rio.EventHandler[rio.TextInputChangeEvent] = None, 
    on_confirm: rio.EventHandler[rio.TextInputConfirmEvent] = None, 
    on_gain_focus: rio.EventHandler[rio.TextInputFocusEvent] = None, 
    on_lose_focus: rio.EventHandler[rio.TextInputFocusEvent] = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin: float | None = None, 
)
text
str
The text currently entered by the user.

label
str
A short text to display next to the text input.

accessibility_label
str

style
Literal['underlined', 'rounded', 'pill']
Changes the visual appearance of the text input.

prefix_text
str
A short text to display before the text input. Useful for displaying currency symbols or other prefixed units.

suffix_text
str
A short text to display after the text input. Useful for displaying units, parts of e-mail addresses, and similar.

is_secret
bool
Whether the text should be hidden. Use this to hide sensitive information such as passwords.

is_sensitive
bool
Whether the text input should respond to user input.

is_valid
bool
Visually displays to the user whether the current text is valid. You can use this to signal to the user that their input needs to be changed.

on_change
rio.EventHandler[rio.TextInputChangeEvent]
Triggered when the user changes the text.

on_confirm
rio.EventHandler[rio.TextInputConfirmEvent]
Triggered when the user explicitly confirms their input, such as by pressing the "Enter" key. You can use this to trigger followup actions, such as logging in or submitting a form.

on_gain_focus
rio.EventHandler[rio.TextInputFocusEvent]

on_lose_focus
rio.EventHandler[rio.TextInputFocusEvent]

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

Examples
Here's a simple example that allows the user to enter a value and displays it back to them:

Python

class MyComponent(rio.Component):
    text: str = "Hello, World!"

    def build(self) -> rio.Component:
        return rio.Column(
            rio.TextInput(
                # In order to retrieve a value from the component, we'll
                # use an attribute binding. This way our own value will
                # be updated whenever the user changes the text.
                text=self.bind().text,
                label="Enter a Text",
            ),
            rio.Text(f"You've typed: {self.text}"),
        )
Alternatively you can also attach an event handler to react to changes. This is a little more verbose, but allows you to run arbitrary code when the user changes the text:

Python

class MyComponent(rio.Component):
    text: str = "Hello, World!"

    def on_value_change(self, event: rio.TextInputChangeEvent):
        # This function will be called whenever the input's value
        # changes. We'll display the new value in addition to updating
        # our own attribute.
        self.text = event.text
        print(f"You've typed: {self.text}")

    def build(self) -> rio.Component:
        return rio.TextInput(
            text=self.text,
            label="Enter a Text",
            on_change=self.on_value_change,
        )