Slideshow
Repeatedly switches between multiple components based on a timer.

The Slideshow component is a container that can hold multiple components, and will display them one after the other, with smooth transitions in between. These are very useful for displaying a series of pictures or news items to visitors.

Constructor
Slideshow(
    *children: rio.Component, 
    linger_time: float | datetime.timedelta = datetime.timedelta(seconds=10), 
    corner_radius: None | float | tuple[float, float, float, float] = None, 
    # Inherited from `rio.Component`
    key: str | int | None = None, 
    margin: float | None = None, 
    margin_x: float | None = None, 
    margin_y: float | None = None, 
    margin_left: float | None = None, 
    margin_top: float | None = None, 
    margin_right: float | None = None, 
    margin_bottom: float | None = None, 
    min_width: float = 0, 
    min_height: float = 0, 
    grow_x: bool = False, 
    grow_y: bool = False, 
    align_x: float | None = None, 
    align_y: float | None = None, 
)
children
rio.Component
The components to transition between.

linger_time
float | datetime.timedelta
The time in seconds to display each component before switching to the next one.

corner_radius
None | float | tuple[float, float, float, float]
How rounded the slideshow's corners should be. If set to None, the slideshow will use a default corner radius from the current theme.

key
str | int | None
A unique identifier for this component. If two components with the same key are present during reconciliation they will be considered the same component and their state will be preserved. If no key is specified, reconciliation falls back to a less precise method, by comparing the location of the component in the component tree.

margin
float | None
The margin around this component. This is a shorthand for setting margin_left, margin_top, margin_right and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin and margin_left are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_x
float | None
The horizontal margin around this component. This is a shorthand for setting margin_left and margin_right to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_x and margin_left are both specified, margin_left is used for the left side, while the other side uses margin_x. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_y
float | None
The vertical margin around this component. This is a shorthand for setting margin_top and margin_bottom to the same value. If multiple conflicting margins are specified the most specific one wins. If for example margin_y and margin_top are both specified, margin_top is used for the top side, while the other side uses margin_y. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_left
float | None
The left margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_left and margin are both specified, margin_left is used for the left side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_top
float | None
The top margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_top and margin are both specified, margin_top is used for the top side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_right
float | None
The right margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_right and margin are both specified, margin_right is used for the right side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

margin_bottom
float | None
The bottom margin around this component. If multiple conflicting margins are specified this one will be used, since it's the most specific. If for example margin_bottom and margin are both specified, margin_bottom is used for the bottom side, while the other sides use margin. Sizes are measured in "font heights", so a margin of 1 is the height of a single line of text.

min_width
float
The minimum amount of horizontal space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

min_height
float
The minimum amount of vertical space this component should request during layouting. The component will never be smaller than this size.

Please note that the space a Component receives during layouting may not match the request. As a general rule, for example, containers try to pass on all available space to children. If you really want a Component to only take up as much space as requested, consider specifying an alignment.

Sizes are measured in "font heights", so a width of 1 is the same as the height of a single line of text.

grow_x
bool
Whether this component should request all the superfluous horizontal space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_x, some containers (such as rio.Row) will give all remaining space to those components first.

grow_y
bool
Whether this component should request all the superfluous vertical space available in its parent. Containers normally divide up any extra space evenly between their children. However, if components have grow_y, some containers (such as rio.Column) will give all remaining space to those components first.

align_x
float | None
How this component should be aligned horizontally, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means left-aligned, 0.5 means centered, and 1 means right-aligned.

align_y
float | None
How this component should be aligned vertically, if it receives more space than it requested. This can be a number between 0 and 1, where 0 means top-aligned, 0.5 means centered, and 1 means bottom-aligned.

Examples
Here's a simple example that will continuously switch between two images:

Python

from pathlib import Path

rio.Slideshow(
    rio.Image(Path("first.jpg")),
    rio.Image(Path("second.jpg")),
    linger_time=5,
)
You can access the App's assets directory using the assets property. This will return a pathlib.Path object pointing to the assets directory:

Python

rio.Slideshow(
    rio.Image(self.session.assets / "first.jpg"),
    rio.Image(self.session.assets / "second.jpg"),
    linger_time=5,
)